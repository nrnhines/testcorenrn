load_file("netparmpi.hoc")

objref pnm, pc, tvec, idvec

proc pcell() {localobj s
  s = new String()
  sprint(s.s, "t%g", t)
  pc.prcellstate($1, s.s)
}

proc spike2file() { localobj outf, s
    if(dump_coreneuron_model) {
        return
    }
    s = new String()
    sprint(s.s, "out%s.dat", $s1)
    outf = new File()
    if (pc.id == 0) {outf.wopen(s.s) outf.close }
    for pnm.serialize() {
        outf.aopen(s.s)
        for i=0, idvec.size-1 {
            outf.printf("%.8g\t%d\n", tvec.x[i], idvec.x[i])
        }
        outf.close
    }
}

proc prun() { local mode  localobj po
    mode = 0
    if(dump_coreneuron_model) {
        pc.nrnbbcore_write("coredat")
        print "dump_coreneuron_model=1, finishing execution without simulation\n"
        return
    }
    if (use_coreneuron || use_coreneuron_gpu) {
        if (!nrnpython("from neuron import coreneuron")) {
            printf("Python not available\n")
            return
        }
        po = new PythonObject()
        po.coreneuron.enable = 1
        if(use_coreneuron_filemode) {
            po.coreneuron.filemode = 1
        }
        if(use_coreneuron_gpu) {
            po.coreneuron.gpu = 1
        }
        if(pc.id == 0) {
            printf("nrncore_arg: |%s|\n", po.coreneuron.nrncore_arg(tstop))
        }
        mode = use_coreneuron_psolve_test_mode
    } else {
        tsav = startsw()
    }
    if (mode == 0) {
        pc.psolve(tstop)
    } else if (mode == 1) { // good for testing complete nrn->corenrn
      po.coreneuron.enable = 0
      pc.psolve(tstop/2) // nrn in arbitrary state
      po.coreneuron.enable = 1
      pc.psolve(tstop)
    } else if (mode == 2) {
        while (t < tstop) {
          pc.psolve(t + 1)
        }
    } else {
        while (t < tstop) {
            po.coreneuron.enable = 0
            pc.psolve(t + 0.5)
            po.coreneuron.enable = 1
            pc.psolve(t + 0.5)
        }
    }
    if (!use_coreneuron && pc.id == 0) {
        printf("psolve time %g\n", startsw() - tsav)
    }
}
